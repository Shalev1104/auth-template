generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

enum OAuthProvider {
  Google
  Facebook
  Github
  Twitter
  Microsoft

  @@map("OAuthProviders")
}

enum OTPChannel {
  Call
  SMS
  Email
  Authenticator

  @@map("OTPChannels")
}

model User {
  userId         String   @id @default(uuid()) @map("user_id") @db.VarChar
  createdAt      DateTime @default(now()) @map("created_at")
  lastLoginAt    DateTime @default(now()) @map("last_login_at")
  name           String   @map("full_name") @db.VarChar
  avatarImageUrl String?  @map("avatar_url") @db.VarChar
  phone          String?  @db.VarChar(15)

  emailAndPasswordLogin EmailAndPasswordLogin?
  oAuthLogins           OAuthLogin[]

  @@map("users")
}

model OAuthLogin {
  userId       String        @map("user_id")
  providerName OAuthProvider @map("provider_name")
  providerId   String        @unique @map("provider_id") @db.VarChar
  emailAddress String?       @map("email") @db.VarChar(255)

  user User @relation(fields: [userId], references: [userId])

  @@id([userId, providerName])
  @@index([emailAddress])
  @@map("user_external_logins")
}

model EmailAndPasswordLogin {
  loginId          String  @id @default(uuid()) @map("login_id") @db.VarChar
  userId           String  @unique @map("user_id")
  emailAddress     String  @unique @map("email") @db.VarChar(255)
  hashedPassword   String  @map("password") @db.VarChar(64)
  totpSharedSecret String? @unique @map("totp_shared_secret") @db.VarChar

  user                    User                     @relation(fields: [userId], references: [userId])
  verifications           Verification[]
  twoFactorAuthentication TwoFactorAuthentication?

  @@index([emailAddress])
  @@map("user_login")
}

model Verification {
  userId  String     @map("user_id") @db.VarChar
  channel OTPChannel

  emailAndPasswordLogin   EmailAndPasswordLogin    @relation(fields: [userId], references: [userId])
  twoFactorAuthentication TwoFactorAuthentication?

  @@id([userId, channel])
  @@map("user_verifications")
}

model TwoFactorAuthentication {
  userId  String     @unique @map("user_id") @db.VarChar
  channel OTPChannel

  verification          Verification          @relation(fields: [userId, channel], references: [userId, channel], onDelete: Cascade)
  emailAndPasswordLogin EmailAndPasswordLogin @relation(fields: [userId], references: [userId])

  @@id([userId, channel])
  @@map("two_factor_authentication_users")
}
