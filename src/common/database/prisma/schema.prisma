generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

enum OAuthStrategy {
  Google
  Facebook
  Github

  @@map("OAuthStrategies")
}

enum OTPMethod {
  PhoneCall
  PhoneSMS
  Email
  Authenticator

  @@map("OTPMethods")
}

enum Activity {
  SuccessLoginAttempt
  FailureLoginAttempt
  AccountLockdown
  PasswordChange
  Setup2FA
  Disable2FA
  EmailVerified
  PhoneVerified
}

model User {
  userId         String   @id @default(uuid()) @map("user_id") @db.VarChar
  name           String   @map("full_name") @db.VarChar
  avatarImageUrl String?  @map("avatar_url") @db.VarChar
  phone          String?  @db.VarChar(15)
  createdAt      DateTime @default(now()) @map("created_at")

  internalLogin InternalLogin?
  externalLogin ExternalLogin[]
  securityLogs  SecurityLog[]

  @@map("users")
}

model ExternalLogin {
  providerId   String        @id @map("provider_id") @db.VarChar
  emailAddress String        @map("email") @db.VarChar(255)
  userId       String        @map("user_id")
  providerName OAuthStrategy @map("provider_name")

  user User @relation(fields: [userId], references: [userId])

  @@index([emailAddress])
  @@map("user_login_external")
}

model InternalLogin {
  loginId              String  @id @default(uuid()) @map("login_id") @db.VarChar
  userId               String  @unique @map("user_id")
  emailAddress         String  @unique @map("email") @db.VarChar(255)
  hashedPassword       String  @map("password") @db.VarChar(64)
  totpSharedSecret     String? @unique @map("totp_shared_secret") @db.VarChar
  activeVerificationId String? @unique

  user               User               @relation(fields: [userId], references: [userId])
  verifications      UserVerification[] @relation(name: "user_verifications")
  activeVerification UserVerification?  @relation(name: "user_active_verification")

  @@index([emailAddress])
  @@map("user_login")
}

model UserVerification {
  verificationId String    @id @default(uuid()) @db.VarChar
  userId         String    @map("user_id") @db.VarChar
  method         OTPMethod

  user               InternalLogin @relation(name: "user_verifications", fields: [userId], references: [userId])
  activeVerification InternalLogin @relation(name: "user_active_verification", fields: [verificationId], references: [activeVerificationId], onDelete: SetDefault)

  @@unique([userId, method])
  @@map("user_verifications")
}

model SecurityLog {
  logId     String   @id @default(uuid()) @map("log_id") @db.VarChar
  userId    String   @map("user_id") @db.VarChar
  activity  Activity
  loggedAt  DateTime @default(now()) @map("logged_at")
  ipAddress String   @map("ip") @db.VarChar

  user User @relation(fields: [userId], references: [userId])

  @@map("security_logs")
}
