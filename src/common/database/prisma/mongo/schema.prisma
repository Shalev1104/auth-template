generator client {
  provider = "prisma-client-js"
  output   = "../../../../../node_modules/@prisma/mongo/client"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_DATABASE_URL")
}

enum NodeType {
  Content  @map("CONTENT")
  Question @map("QUESTION")
  Form     @map("FORM")
  Logic    @map("LOGIC")
}

enum InputType {
  Text   @map("TEXT")
  Number @map("NUMBER")
  Date   @map("DATE")
}

type Choice {
  childId String @map("_child_id")
  value   String
}

type Input {
  id          String    @map("_id")
  type        InputType
  label       String
  placeholder String?
}

model Content {
  nodeId   String @id @default(uuid()) @map("_id")
  messages Json[]

  contentNode Node @relation("content_node", fields: [nodeId], references: [nodeId])
}

model Question {
  nodeId   String   @id @default(uuid()) @map("_id")
  question String
  choices  Choice[]

  questionNode Node @relation("question_node", fields: [nodeId], references: [nodeId])
}

model Form {
  nodeId String  @id @default(uuid()) @map("_id")
  inputs Input[]

  formNode Node @relation("form_node", fields: [nodeId], references: [nodeId])
}

model Logic {
  nodeId         String @id @default(uuid()) @map("_id")
  logic          Json
  successChildId String @map("success_child_id")
  failedChildId  String @map("failed_child_id")

  logicNode Node @relation("logic_node", fields: [nodeId], references: [nodeId])
}

model Node {
  nodeId   String   @id @default(uuid()) @map("_id")
  type     NodeType
  parentId String?  @map("_parentId")
  children Node[]   @relation("ParentChild")
  parent   Node?    @relation("ParentChild", fields: [parentId], references: [nodeId], onDelete: NoAction, onUpdate: NoAction)

  content  Content?  @relation("content_node")
  question Question? @relation("question_node")
  form     Form?     @relation("form_node")
  logic    Logic?    @relation("logic_node")
}

model Tree {
  treeId  String  @id @default(uuid()) @map("_id")
  version String? @unique
  data    Json

  @@map("trees")
}
